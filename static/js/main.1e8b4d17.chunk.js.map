{"version":3,"sources":["components/Header.js","components/Weather.js","components/Form.js","App.js","components/WeatherClass.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Weather","props","city","country","temperature","humidity","description","error","Form","onSubmit","loadWeather","type","name","placeholder","Api_Key","Component","App","state","undefined","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Header","components_Form","this","components_Weather","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e8b4d17.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title-container__title\">Weather App </h1>\r\n            <p className=\"title-container__subtitle\"> Helps you find weather conditions in cities... </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"weather__info\">\r\n            {props.city && props.country && <p className=\"weather__key\">location : {props.city}, {props.country}</p>}\r\n            {props.temperature && <p className=\"weather__key\">temperature : {props.temperature}</p>}\r\n            {props.humidity && <p className=\"weather__key\">humidity : {props.humidity}</p>}\r\n            {props.description && <p className=\"weather__key\">description : {props.description}</p>}\r\n            {props.error && <p className=\"weather__key\">error : {props.error}</p>}\r\n        </div>\r\n    )\r\n}\r\nexport default Weather;","import React, { Component } from 'react'\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form onSubmit={props.loadWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Weather from './components/Weather';\nimport Form from './components/Form';\nimport WeatherClass from './components/WeatherClass';\n\nconst Api_Key = \"8d2de98e089f1c28e1a22fc19a24ef04\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n\n    const response = await api_call.json();\n\n    console.log(response);\n    if (city && country) {\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        error: \"please put city and conutry\"\n      })\n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Header />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form loadWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default App;","import React, { Component } from 'react'\r\n\r\nclass WeatherClass extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.city && this.props.country && <p>location : {this.props.city}, {this.props.country}</p>}\r\n                {this.props.temperature && <p>temperature : {this.props.temperature}</p>}\r\n                {this.props.humidity && <p>humidity : {this.props.humidity}</p>}\r\n                {this.props.description && <p>description : {this.props.description}</p>}\r\n                {this.props.error && <p>error : {this.props.error}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherClass","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}